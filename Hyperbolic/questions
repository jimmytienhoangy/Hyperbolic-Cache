Here is a list of questions that we currently have: 

1) Should we be updating the initial insertion time for an item in our cache if we are updating the value of the item to a new value?

3) Hyperbolic cache, do we increase the access count when we set something that is already in the cache? (?) 

2) What should (S) be for sampling for the Hyperbolic cache?

5) What is the best way to test the accuracy of our hyperbolic cache since we have to deal with random sampling and timing? 





6) Did we go about using trace.tr correctly, or should we be using premade libraries to help us run these traces?

7) The way we are running the traces, we are running gets, and if the get misses, we run set. Is this the right way? This registers the initial gets as misses, should we account for this? 

7) What are the series of gets/sets that we should be doing to test? (?)

8) Should we be evicting based on the number of items or byte size? (paper on hyperbolic does number of items while trace.tr seems to use byte size!)

9) Is the scope of our evaluation sufficient? (Comparing LFU to hyperbolic cache hit/miss ratio)

10) Do we need to meet some kind of performance requirements? (Our LFU loops through all keys of mapping to find item with least amount of accesses. Linear time.)


4) For the set method, how should we go about checking if the value associated with the key is new or not because we are only storing value lengths? This will affect whether we update. 


OH 1: 
Wed. 10am-11am

OH 2: Last Second
Office Hours: Thu. 10am-11am
Office Hours: Thu. 2:30pm-3:30pm